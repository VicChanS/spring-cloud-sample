<?xml version="1.0" encoding="UTF-8"?><!--该日志将日志级别不同的log信息保存到不同的文件中 -->
<configuration>
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

    <springProperty scope="context" name="springAppName" source="spring.application.name"/>
    <springProperty scope="context" name="serverIP" source="server.ip"/>

    <!--非生产环境-->
    <springProfile name="!prod">
        <!--获取不到配置中心中的yml配置-->
        <property name="LOG_LEVEL" value="info"/>
    </springProfile>
    <!--生产环境-->
    <springProfile name="prod">
        <property name="LOG_LEVEL" value="error"/>
    </springProfile>

    <!-- 日志在工程中的输出位置 -->
    <property name="LOG_FILE" value="${BUILD_FOLDER:-build}/logs/${springAppName}"/>

    <!-- 日志最大的历史 30天 -->
    <property name="LOG_MAX_HISTORY" value="30"/>
    <!-- 文件大小（超过大小会重新创建下个文件） -->
    <property name="MAX_FILE_SIZE" value="2MB"/>

    <!-- 控制台的日志输出样式 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>    <!-- 控制台输出 -->

    <!--控制台输出格式-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 日志输出编码 -->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>
    <!--输出到kafka-->
    <appender name="kafkaAppender" class="com.github.danielwegener.logback.kafka.KafkaAppender">
        <encoder class="com.github.danielwegener.logback.kafka.encoding.LayoutKafkaMessageEncoder">
            <!--使用封装好的Layout会缺失message字段-->
            <!--<layout class="net.logstash.logback.layout.LogstashLayout">
                &lt;!&ndash;是否包含上下文，开启的话会包含hostname等logback的context信息&ndash;&gt;
                <includeContext>true</includeContext>
                &lt;!&ndash;是否包含日志来源&ndash;&gt;
                <includeCallerData>true</includeCallerData>
                &lt;!&ndash;自定义附加字段&ndash;&gt;
                <customFields>{"system":"test"}</customFields>
                &lt;!&ndash;自定义字段的简称&ndash;&gt;
                <fieldNames class="net.logstash.logback.fieldnames.ShortenedFieldNames"/>
            </layout>-->
            <!--使用自定义格式的layout-->
            <layout class="net.logstash.logback.layout.LoggingEventCompositeJsonLayout">
                <providers>
                    <timestamp>
                        <timeZone>GMT+8</timeZone>
                    </timestamp>
                    <pattern>
                        <pattern>
                            {
                            "severity": "%level",
                            "service": "${springAppName:-}",
                            "traceId": "%X{X-B3-TraceId:-}",
                            "parentSpanId" : "%X{X-B3-ParentSpanId:-}",
                            "spanId": "%X{X-B3-SpanId:-}",
                            "exportable": "%X{X-Span-Export:-}",
                            "pid": "${PID:-}",
                            "thread": "%thread",
                            "class": "%logger{40}",
                            "msg": "%message"
                            }
                        </pattern>
                    </pattern>
                </providers>
            </layout>
            <charset>UTF-8</charset>
        </encoder>
        <!--kafka topic 需要与配置文件里面的topic一致 否则kafka会沉默并鄙视你-->
        <topic>${springAppName}</topic>
        <keyingStrategy class="com.github.danielwegener.logback.kafka.keying.HostNameKeyingStrategy"/>
        <deliveryStrategy class="com.github.danielwegener.logback.kafka.delivery.AsynchronousDeliveryStrategy"/>
        <producerConfig>bootstrap.servers=${serverIP}:9092</producerConfig>
    </appender>

    <!--root的level基本除了INFO之外不能改为别的，如改为DEBUG的话会导致启动初始化持续堵塞，容器一直无法启动。-->
    <!--将kafkaAppender用logback的AsyncAppender处理下即可修改root的日志级别为其他的，目前我只尝试了DEBUG级别-->
    <appender name="async" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="kafkaAppender" />
    </appender>



    <!--&lt;!&ndash; ERROR级别日志 &ndash;&gt;
    &lt;!&ndash; 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender &ndash;&gt;
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        &lt;!&ndash; 过滤器，只记录WARN级别的日志 &ndash;&gt;
        &lt;!&ndash; 如果日志级别等于配置级别，过滤器会根据onMatch 和 onMismatch接收或拒绝日志。 &ndash;&gt;
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            &lt;!&ndash; 设置过滤级别 &ndash;&gt;
            <level>ERROR</level>
            &lt;!&ndash; 用于配置符合过滤条件的操作 &ndash;&gt;
            <onMatch>ACCEPT</onMatch>
            &lt;!&ndash; 用于配置不符合过滤条件的操作 &ndash;&gt;
            <onMismatch>DENY</onMismatch>
        </filter>
        &lt;!&ndash; 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责触发滚动 &ndash;&gt;
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            &lt;!&ndash;日志输出位置 可以是相对和绝对路径 &ndash;&gt;
            <fileNamePattern>
                ${LOG_FILE}/error/${springAppName}-%d{yyyy-MM-dd}-%i.log
            </fileNamePattern>
            &lt;!&ndash; 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，如<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件时，那些为了归档而创建的目录也会被删除 &ndash;&gt;
            <maxHistory>${LOG_MAX_HISTORY}</maxHistory>
            <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                &lt;!&ndash; 单个log文件超过该大小就会重新建一个log文件 &ndash;&gt;
                <MaxFileSize>${MAX_FILE_SIZE}</MaxFileSize>
            </TimeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <pattern>
                &lt;!&ndash; 设置日志输出格式 &ndash;&gt;
                ${CONSOLE_LOG_PATTERN}
            </pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>


    &lt;!&ndash; WARN级别日志 appender &ndash;&gt;
    <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        &lt;!&ndash; 过滤器，只记录WARN级别的日志 &ndash;&gt;
        &lt;!&ndash; 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 &ndash;&gt;
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            &lt;!&ndash; 设置过滤级别 &ndash;&gt;
            <level>WARN</level>
            &lt;!&ndash; 用于配置符合过滤条件的操作 &ndash;&gt;
            <onMatch>ACCEPT</onMatch>
            &lt;!&ndash; 用于配置不符合过滤条件的操作 &ndash;&gt;
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            &lt;!&ndash;日志输出位置 可相对、和绝对路径 &ndash;&gt;
            <fileNamePattern>${LOG_FILE}/warn/${springAppName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <maxHistory>${LOG_MAX_HISTORY}</maxHistory>
            <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxFileSize>${MAX_FILE_SIZE}</MaxFileSize>
            </TimeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>


    &lt;!&ndash; INFO级别日志 appender &ndash;&gt;
    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}/info/${springAppName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <maxHistory>${LOG_MAX_HISTORY}</maxHistory>
            <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxFileSize>${MAX_FILE_SIZE}</MaxFileSize>
            </TimeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>


    &lt;!&ndash; DEBUG级别日志 appender &ndash;&gt;
    <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}/debug/${springAppName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <maxHistory>${LOG_MAX_HISTORY}</maxHistory>
            <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxFileSize>${MAX_FILE_SIZE}</MaxFileSize>
            </TimeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>


    &lt;!&ndash; TRACE级别日志 appender &ndash;&gt;
    <appender name="TRACE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>TRACE</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}/trace/${springAppName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <maxHistory>${LOG_MAX_HISTORY}</maxHistory>
            <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxFileSize>${MAX_FILE_SIZE}</MaxFileSize>
            </TimeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    &lt;!&ndash; 为logstash输出的JSON格式的Appender &ndash;&gt;
    <appender name="LOGSTASH" class="ch.qos.logback.core.rolling.RollingFileAppender">
        &lt;!&ndash;<file>${LOG_FILE}.json</file>&ndash;&gt;
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            &lt;!&ndash;日志文件输出的文件名 &ndash;&gt;
            &lt;!&ndash;<fileNamePattern>${LOG_FILE}/logstash/${springAppName}-%d{yyyy-MM-dd}.json.gz</fileNamePattern>&ndash;&gt;
            <fileNamePattern>${LOG_FILE}/logstash/${springAppName}-%d{yyyy-MM-dd}-%i.json</fileNamePattern>
            &lt;!&ndash;日志文件保留天数 &ndash;&gt;
            <MaxHistory>${LOG_MAX_HISTORY}</MaxHistory>
            <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxFileSize>${MAX_FILE_SIZE}</MaxFileSize>
            </TimeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        &lt;!&ndash; 日志输出编码 &ndash;&gt;
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <timestamp>
                    <timeZone>GMT+8</timeZone>
                </timestamp>
                <pattern>
                    <pattern>
                        {
                        "severity": "%level",
                        "service": "${springAppName:-}",
                        "trace": "%X{X-B3-TraceId:-}",
                        "span": "%X{X-B3-SpanId:-}",
                        "exportable": "%X{X-Span-Export:-}",
                        "pid": "${PID:-}",
                        "thread": "%thread",
                        "class": "%logger{40}",
                        "rest": "%message"
                        }
                    </pattern>
                </pattern>
            </providers>
        </encoder>
    </appender>-->

    <!-- 日志输出级别 -->
    <root>
        <!-- 打印debug级别日志及以上级别日志 -->
        <level value="${LOG_LEVEL}"/>
        <!-- 控制台输出 -->
        <appender-ref ref="console"/>
        <!--输出到kafka-->
        <appender-ref ref="async"/>
        <!-- 文件输出 -->
        <!--<appender-ref ref="ERROR"/>
        <appender-ref ref="INFO"/>
        <appender-ref ref="WARN"/>
        <appender-ref ref="DEBUG"/>
        <appender-ref ref="TRACE"/>
        <appender-ref ref="LOGSTASH"/>-->
    </root>
</configuration>
